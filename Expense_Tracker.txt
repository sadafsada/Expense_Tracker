import java.io.*;
import java.util.*;

public class ExpenseTrackerApp {
    private static class UserManager {
        private Map<String, String> users = new HashMap<>();

        public UserManager() {
            loadUsers();
        }

        public boolean registerUser(String username, String password) {
            if (users.containsKey(username)) return false;
            users.put(username, password);
            saveUsers();
            return true;
        }

        public boolean authenticateUser(String username, String password) {
            return password.equals(users.get(username));
        }

        private void saveUsers() {
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("users.dat"))) {
                oos.writeObject(users);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void loadUsers() {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("users.dat"))) {
                users = (Map<String, String>) ois.readObject();
            } catch (IOException | ClassNotFoundException e) {
                // Handle or ignore
            }
        }
    }

    private static class Expense implements Serializable {
        private static final long serialVersionUID = 1L;
        private String date, category;
        private double amount;

        public Expense(String date, String category, double amount) {
            this.date = date;
            this.category = category;
            this.amount = amount;
        }

        public String getDate() { return date; }
        public String getCategory() { return category; }
        public double getAmount() { return amount; }
    }

    private static class ExpenseManager {
        private List<Expense> expenses = new ArrayList<>();

        public ExpenseManager() {
            loadExpenses();
        }

        public void addExpense(String date, String category, double amount) {
            expenses.add(new Expense(date, category, amount));
            saveExpenses();
        }

        public List<Expense> getExpenses() { return expenses; }

        public Map<String, Double> getCategorySummation() {
            Map<String, Double> summation = new HashMap<>();
            for (Expense exp : expenses) {
                summation.merge(exp.getCategory(), exp.getAmount(), Double::sum);
            }
            return summation;
        }

        private void saveExpenses() {
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("expenses.dat"))) {
                oos.writeObject(expenses);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void loadExpenses() {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("expenses.dat"))) {
                expenses = (List<Expense>) ois.readObject();
            } catch (IOException | ClassNotFoundException e) {
                // Handle or ignore
            }
        }
    }

    private static UserManager userManager = new UserManager();
    private static ExpenseManager expenseManager = new ExpenseManager();
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        while (true) {
            System.out.println("1. Register\n2. Login\n3. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1: register(); break;
                case 2: login(); break;
                case 3: return;
                default: System.out.println("Invalid choice.");
            }
        }
    }

    private static void register() {
        System.out.print("Username: ");
        String username = scanner.nextLine();
        System.out.print("Password: ");
        String password = scanner.nextLine();
        if (userManager.registerUser(username, password)) {
            System.out.println("Registration successful.");
        } else {
            System.out.println("Username already exists.");
        }
    }

    private static void login() {
        System.out.print("Username: ");
        String username = scanner.nextLine();
        System.out.print("Password: ");
        String password = scanner.nextLine();

        if (userManager.authenticateUser(username, password)) {
            manageExpenses();
        } else {
            System.out.println("Invalid username or password.");
        }
    }

    private static void manageExpenses() {
        while (true) {
            System.out.println("1. Add Expense\n2. List Expenses\n3. Category Summation\n4. Logout");
            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1: addExpense(); break;
                case 2: listExpenses(); break;
                case 3: viewCategorySummation(); break;
                case 4: return;
                default: System.out.println("Invalid choice.");
            }
        }
    }

    private static void addExpense() {
        System.out.print("Date (YYYY-MM-DD): ");
        String date = scanner.nextLine();
        System.out.print("Category: ");
        String category = scanner.nextLine();
        System.out.print("Amount: ");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // consume newline

        expenseManager.addExpense(date, category, amount);
        System.out.println("Expense added.");
    }

    private static void listExpenses() {
        List<Expense> expenses = expenseManager.getExpenses();
        if (expenses.isEmpty()) {
            System.out.println("No expenses found.");
            return;
        }

        System.out.printf("%-15s %-15s %s\n", "Date", "Category", "Amount");
        for (Expense e : expenses) {
            System.out.printf("%-15s %-15s %.2f\n", e.getDate(), e.getCategory(), e.getAmount());
        }
    }

    private static void viewCategorySummation() {
        Map<String, Double> summation = expenseManager.getCategorySummation();
        if (summation.isEmpty()) {
            System.out.println("No expenses to summarize.");
            return;
        }

        System.out.printf("%-15s %s\n", "Category", "Total Amount");
        for (Map.Entry<String, Double> entry : summation.entrySet()) {
            System.out.printf("%-15s %.2f\n", entry.getKey(), entry.getValue());
        }
    }
}
